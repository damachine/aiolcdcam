.TH COOLERDASH 1 "July 2025" "coolerdash 1.25.07.16.0000" "User Commands"
.SH NAME
coolerdash \- CoolerDash Temperature Monitor (Professional Modular C Daemon)
.SH SYNOPSIS
.B coolerdash
.br
.B coolerdash
[B\-hR|\fB\-\-help\fR]
.SH DESCRIPTION
.B coolerdash
is a high-performance, modular C-based daemon with professional systemd integration that monitors CPU and GPU temperatures and displays them graphically on the LCD display of an NZXT AIO water cooler. The program is fully developed in modular C99 architecture for maximum efficiency, maintainability, and production stability.

The program always runs in a fixed two-box layout (CPU top, GPU bottom) and does not support display mode selection. All mode logic and coolant display have been removed for simplicity and reliability.

Note: Support for selectable display modes (e.g. load bars, circular diagrams) may be reintroduced in a future version if there is sufficient demand.

The program communicates with the AIO device via the native CoolerControl REST API without Python dependencies and provides detailed systemd logs for professional service management.

.SH ARCHITECTURE
The program follows the standard C project structure:
.TP
.I src/
Source code files (.c)
.TP
.I include/
Header files (.h) and central configuration
.TP
.I build/
Compiled object files (.o)
.TP
.I man/
Documentation
.TP
.I src/main.c
Daemon management and sensor coordination
.TP
.I include/config.h
Central configuration (UUID, paths, colors, layout)
.TP
.I src/cpu_monitor.c
CPU temperature, CPU load, and RAM monitoring
.TP
.I src/gpu_monitor.c
GPU temperature and GPU load (NVIDIA)
.TP
.I src/coolant_monitor.c
Coolant temperature monitoring
.TP
.I src/display.c
Rendering engine, mode logic, and Cairo graphics
.TP
.I src/coolercontrol.c
REST API communication and session management

.SH OPTIONS
.TP
.BR \-h ", " \-\-help
Shows help information and usage examples
.SH FILES
.TP
.I /opt/coolerdash/bin/coolerdash
Main program (modern modular version)
.TP
.I /opt/coolerdash/man/README.md
Documentation
.TP
.I /opt/coolerdash/images/coolerdash.png
Generated temperature image
.TP
.I /etc/systemd/system/coolerdash.service
Systemd service file
.TP
.I /var/run/coolerdash.pid
PID file for process management
.SH EXAMPLES
.TP
Start program (fixed two-box layout, CPU/GPU temperature only):
.B coolerdash
.TP
Show help:
.B coolerdash --help
.TP
Service management:
.B sudo systemctl start coolerdash
.br
.B sudo systemctl status coolerdash
.br
.B journalctl -u coolerdash -f

.SH SYSTEMD INTEGRATION
The program provides professional systemd integration with detailed logs:
.TP
.B Service Installation
.B sudo make install
.br
Automatically installs the service and restarts it on updates.
.TP
.B Service Management
.B sudo systemctl enable coolerdash.service
.br
.B sudo systemctl start coolerdash.service
.br
.B sudo systemctl status coolerdash.service
.TP
.B Detailed Logs
.B journalctl -u coolerdash.service --since "10 minutes ago"
.br
Shows module initialization, CoolerControl connection, and operating status.
.TP
.B Makefile Service Shortcuts
.B make start, make stop, make restart, make status, make logs

.SH PERFORMANCE OPTIMIZATIONS
The streamlined design offers the following performance benefits:
.TP
.B Minimal I/O
Only temperature sensors are read for CPU and GPU (no mode-dependent logic).
.TP
.B Sensor data caching
CPU: hwmon paths are cached at startup.
GPU: 2.5-second cache with nvidia-smi.
.TP
.B Change detection
Display updates only on significant changes (0.1°C for temperatures).

.SH CONFIGURATION
All important settings are located in the build-time configuration file \fBinclude/config.h\fR:
.TP
.B Device UID (AUTOMATIC)
AIO device identification is automatically detected at runtime via CoolerControl API
.br
No manual configuration required - device UUID is discovered automatically
.TP
.B API Settings
CoolerControl daemon address (default: http://localhost:11987)
.TP
.B Display settings
Resolution (240x240), update intervals, layout parameters
.TP
.B Temperature thresholds
4-stage color gradient: green (≤55°C) → orange (≤65°C) → hot orange (≤75°C) → red (>75°C)
.TP
.B Cache intervals
Optimization of sensor query frequency

.SH DEPENDENCIES
.TP
.B CoolerControl (REQUIRED)
Must be installed and running (coolercontrold.service)
.br
Installation guide: https://gitlab.com/coolercontrol/coolercontrol/-/blob/main/README.md
.TP
.B System Libraries
Cairo (graphics), cURL (HTTP), NVIDIA-SMI (GPU data), hwmon (temperature sensors)

.SH COMPILATION
.TP
.B Build Command
.B make
(automatically detects and installs dependencies for your Linux distribution)
.TP
.B System Installation
.B sudo make install
(builds, installs to /opt/coolerdash/, configures systemd service)
.TP
.B CPU Optimization
x86-64-v3 optimized for modern CPUs (Intel Haswell+/AMD Excavator+, 2013+)
.br
For older CPUs: \fBCFLAGS=-march=x86-64 make\fR

.SH PERFORMANCE
.TP
.B Minimal I/O
Only temperature sensors for CPU and GPU are read (no mode logic).
.TP
.B Sensor Caching
Hwmon paths cached at startup, GPU data cached for 2.5 seconds
.TP
.B Change Detection
PNG regenerated only on significant temperature changes

.SH DATA SOURCES
.TP
.I /sys/class/hwmon/*/temp*_input
CPU and coolant temperatures
.TP
.B nvidia-smi
GPU temperature and load (NVIDIA cards)
.TP
.I /proc/stat
CPU usage percentage
.TP
.I /proc/meminfo
RAM usage information
.SH SIGNALS
.TP
.B SIGTERM, SIGINT
Terminates the program gracefully
.SH EXIT STATUS
.TP
.B 0
Successfully terminated
.TP
.B 1
Error in argument processing
.SH BUGS
Report bugs to: christkue79@gmail.com or via GitHub Issues: https://github.com/damachine/coolerdash/issues
.SH AUTHOR
Written by DAMACHINE (christkue79@gmail.com).
.SH SEE ALSO
.BR systemctl (1),
.BR coolercontrol (1),
.BR nvidia-smi (1),
.BR journalctl (1)
.br
Project repository: https://github.com/damachine/coolerdash
.SH COPYRIGHT
Copyright © 2025 DAMACHINE. This is free software; see source for copying conditions.
Released under MIT License.
.SH SETUP
Before using coolerdash, ensure CoolerControl is properly configured:
.TP
.B 1. Install and start CoolerControl
Follow: https://gitlab.com/coolercontrol/coolercontrol/-/blob/main/README.md
.br
\fBsudo systemctl start coolercontrold\fR
.TP
.B 2. Configure LCD AIO in CoolerControl GUI
Set your AIO LCD display to "Image" mode (not temperature mode)
.TP
.B 3. Build and install (automatic device detection)
\fBsudo make install\fR
.br
\fBsudo systemctl enable coolerdash.service\fR
.br
\fBsudo systemctl start coolerdash.service\fR
.br
Device UUID is automatically detected at startup

.TP
.B Tested with
NZXT AIO Kraken 2023 (Z-Series)
.TP
.B Compatible with
NZXT AIO Kraken X-Series, Z-Series and other LCD-capable models
