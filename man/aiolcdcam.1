.TH AIOLCDCAM 1 "July 2025" "aiolcdcam 1.25.07.08.2234" "User Commands"
.SH NAME
aiolcdcam \- LCD AIO CAM Temperature Monitor (Professional Modular C Daemon)
.SH SYNOPSIS
.B aiolcdcam
[\fIMODE\fR]
.br
.B aiolcdcam
[\fB\-\-mode\fR \fIMODE\fR]
.br
.B aiolcdcam
[\fB\-h\fR|\fB\-\-help\fR]
.SH DESCRIPTION
.B aiolcdcam
is a high-performance, modular C-based daemon with professional systemd integration that monitors CPU and GPU temperatures and displays them graphically on the LCD display of an NZXT Kraken water cooler. The program is fully developed in modular C99 architecture for maximum efficiency, maintainability, and production stability.

The modular architecture separates CPU, GPU, coolant, and display logic into separate modules. Depending on the selected mode, only the required sensor data is queried, which significantly optimizes I/O performance (def mode uses only temperature sensors, modes 1-3 additionally load data).

The program communicates with the Kraken device via the native CoolerControl REST API without Python dependencies and provides detailed systemd logs for professional service management.

.SH ARCHITECTURE
The program follows the standard C project structure:
.TP
.I src/
Source code files (.c)
.TP
.I include/
Header files (.h) and central configuration
.TP
.I build/
Compiled object files (.o)
.TP
.I man/
Documentation
.TP
.I src/main.c
Daemon management and sensor coordination
.TP
.I include/config.h
Central configuration (UUID, paths, colors, layout)
.TP
.I src/cpu_monitor.c
CPU temperature, CPU load, and RAM monitoring
.TP
.I src/gpu_monitor.c
GPU temperature and GPU load (NVIDIA)
.TP
.I src/coolant_monitor.c
Coolant temperature monitoring
.TP
.I src/display.c
Rendering engine, mode logic, and Cairo graphics
.TP
.I src/coolercontrol.c
REST API communication and session management

.SH OPTIONS
.TP
.I MODE
Sets the display mode for the LCD display. Available modes:
.RS
.TP
.B def
Default mode (temperatures only) - Minimal I/O, no load data
.TP
.B 1
Temperatures + vertical load bars
.TP
.B 2
Temperatures + circular diagrams for load
.TP
.B 3
Temperatures + horizontal load bars
.RE
.TP
.BR \-h ", " \-\-help
Shows help information and usage examples
.SH FILES
.TP
.I /opt/aiolcdcam/bin/aiolcdcam
Main program (modern modular version)
.TP
.I /opt/aiolcdcam/man/README.md
Documentation
.TP
.I /opt/aiolcdcam/images/aiolcdcam.png
Generated temperature image
.TP
.I /etc/systemd/system/aiolcdcam.service
Systemd service file
.TP
.I /var/run/aiolcdcam.pid
PID file for process management
.SH EXAMPLES
.TP
Start program in default mode (temperatures only):
.B aiolcdcam def
.TP
Start program with vertical load bars:
.B aiolcdcam 1
.TP
Start program with circular diagrams:
.B aiolcdcam 2
.TP
Start program with horizontal load bars:
.B aiolcdcam 3
.TP
Show help:
.B aiolcdcam --help
.TP
Service management:
.B sudo systemctl start aiolcdcam
.br
.B sudo systemctl status aiolcdcam
.br
.B journalctl -u aiolcdcam -f

.SH SYSTEMD INTEGRATION
The program provides professional systemd integration with detailed logs:
.TP
.B Service Installation
.B sudo make install
.br
Automatically installs the service and restarts it on updates.
.TP
.B Service Management
.B sudo systemctl enable aiolcdcam.service
.br
.B sudo systemctl start aiolcdcam.service
.br
.B sudo systemctl status aiolcdcam.service
.TP
.B Detailed Logs
.B journalctl -u aiolcdcam.service --since "10 minutes ago"
.br
Shows module initialization, CoolerControl connection, and operating status.
.TP
.B Makefile Service Shortcuts
.B make start, make stop, make restart, make status, make logs

.SH PERFORMANCE OPTIMIZATIONS
The modular design offers the following performance benefits:
.TP
.B Mode-dependent I/O optimization
Mode "def" reads only temperature sensors for minimal I/O.
Modes 1-3 read additional load data with intelligent caching.
.TP
.B Sensor data caching
CPU/Coolant: hwmon paths are cached at startup.
GPU: 2-second cache with nvidia-smi.
CPU load: Stateful between measurements.
.TP
.B Change detection
Display updates only on significant changes (0.1°C for temperatures, 0.5% for load).

.SH CONFIGURATION
All important settings are located in the build-time configuration file \fBinclude/config.h\fR:
.TP
.B Device UID (REQUIRED)
NZXT Kraken device identification found via: \fBcurl http://localhost:11987/devices | jq\fR
.br
Copy the long UUID string and replace AIO_UUID in include/config.h
.TP
.B API Settings
CoolerControl daemon address (default: http://localhost:11987)
.TP
.B Display settings
Resolution (240x240), update intervals, layout parameters
.TP
.B Temperature thresholds
Color gradient thresholds for green/orange/red display
.TP
.B Cache intervals
Optimization of sensor query frequency

.SH DEPENDENCIES
.TP
.B CoolerControl (REQUIRED)
Must be installed and running (coolercontrold.service)
.br
Installation guide: https://gitlab.com/coolercontrol/coolercontrol/-/blob/main/README.md
.TP
.B System Libraries
Cairo (graphics), cURL (HTTP), NVIDIA-SMI (GPU data), hwmon (temperature sensors)

.SH COMPILATION
.TP
.B Build Command
.B make
(automatically detects and installs dependencies for your Linux distribution)
.TP
.B System Installation
.B sudo make install
(builds, installs to /opt/aiolcdcam/, configures systemd service)
.TP
.B CPU Optimization
x86-64-v3 optimized for modern CPUs (Intel Haswell+/AMD Excavator+, 2013+)
.br
For older CPUs: \fBCFLAGS=-march=x86-64 make\fR

.SH PERFORMANCE
.TP
.B Mode-dependent I/O
Mode "def": Only temperature sensors (minimal I/O)
.br
Modes 1-3: Additional CPU/GPU/RAM load data
.TP
.B Sensor Caching
Hwmon paths cached at startup, GPU data cached for 2 seconds
.TP
.B Change Detection
PNG regenerated only on significant temperature/load changes

.SH DATA SOURCES
.TP
.I /sys/class/hwmon/*/temp*_input
CPU and coolant temperatures
.TP
.B nvidia-smi
GPU temperature and load (NVIDIA cards)
.TP
.I /proc/stat
CPU usage percentage
.TP
.I /proc/meminfo
RAM usage information
.SH SIGNALS
.TP
.B SIGTERM, SIGINT
Terminates the program gracefully
.SH EXIT STATUS
.TP
.B 0
Successfully terminated
.TP
.B 1
Error in argument processing
.SH BUGS
Report bugs to: christkue79@gmail.com
.SH AUTHOR
Written by DAMACHINE (christkue79@gmail.com).
.SH SEE ALSO
.BR systemctl (1),
.BR coolercontrol (1),
.BR nvidia-smi (1),
.BR journalctl (1)
.br
Project repository: https://github.com/damachine/aiolcdcam
.SH COPYRIGHT
Copyright © 2025 DAMACHINE. This is free software; see source for copying conditions.
Released under MIT License.
.SH SETUP
Before using aiolcdcam, ensure CoolerControl is properly configured:
.TP
.B 1. Install and start CoolerControl
Follow: https://gitlab.com/coolercontrol/coolercontrol/-/blob/main/README.md
.br
\fBsudo systemctl start coolercontrold\fR
.TP
.B 2. Configure LCD AIO in CoolerControl GUI
Set your AIO LCD display to "Image" mode (not temperature mode)
.TP
.B 3. Configure device UUID in include/config.h
Find UUID: \fBcurl http://localhost:11987/devices | jq\fR
.br
Copy the long UUID string and replace AIO_UUID in include/config.h
.TP
.B 4. Build and install
\fBnano include/config.h\fR (set UUID)
.br
\fBsudo make install\fR
.br
\fBsudo systemctl enable aiolcdcam.service\fR
.br
\fBsudo systemctl start aiolcdcam.service\fR

.TP
.B Tested with
NZXT Kraken 2023 (Z-Series)
.TP
.B Compatible with
NZXT Kraken X-Series, Z-Series and other LCD-capable models
